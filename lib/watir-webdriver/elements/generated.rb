# Autogenerated from the HTML5 specification. Edits may be lost.
module Watir














  class HTMLElement < Element
    attributes(:string => ([:innerhtml, :outerhtml, :id, :title, :lang, :dir, :class_name, :item_type, :item_id, :item_value, :access_key, :access_key_label, :content_editable, :spellcheck, :command_type, :label, :icon]), :token_list => ([:class_list, :item_ref, :item_prop]), :string_map => ([:dataset]), :bool => ([:item_scope, :hidden, :draggable, :is_content_editable, :disabled, :checked]), :properties_collection => ([:properties]), :int => ([:tab_index]), :html_element => ([:context_menu]), :style => ([:style]), :function => ([:onabort, :onblur, :oncanplay, :oncanplaythrough, :onchange, :onclick, :oncontextmenu, :oncuechange, :ondblclick, :ondrag, :ondragend, :ondragenter, :ondragleave, :ondragover, :ondragstart, :ondrop, :ondurationchange, :onemptied, :onended, :onerror, :onfocus, :onformchange, :onforminput, :oninput, :oninvalid, :onkeydown, :onkeypress, :onkeyup, :onload, :onloadeddata, :onloadedmetadata, :onloadstart, :onmousedown, :onmousemove, :onmouseout, :onmouseover, :onmouseup, :onmousewheel, :onpause, :onplay, :onplaying, :onprogress, :onratechange, :onreadystatechange, :onscroll, :onseeked, :onseeking, :onselect, :onshow, :onstalled, :onsubmit, :onsuspend, :ontimeupdate, :onvolumechange, :onwaiting]))
  end
  class Unknown < HTMLElement
    # do nothing
  end
  class Html < HTMLElement
    # do nothing
  end
  class Html < HTMLElement
    attributes(:string => ([:version]))
  end
  class Head < HTMLElement
    # do nothing
  end
  class Title < HTMLElement
    attributes(:string => ([:text]))
  end
  class Base < HTMLElement
    attributes(:string => ([:href, :target]))
  end
  class Meta < HTMLElement
    attributes(:string => ([:name, :http_equiv, :content]))
  end
  class Meta < HTMLElement
    attributes(:string => ([:scheme]))
  end
  class Style < HTMLElement
    attributes(:bool => ([:disabled, :scoped]), :string => ([:media, :type]))
  end
  class Script < HTMLElement
    attributes(:string => ([:src, :type, :charset, :text]), :bool => ([:async, :defer]))
  end
  class Script < HTMLElement
    attributes(:string => ([:event, :html_for]))
  end
  class Body < HTMLElement
    attributes(:function => ([:onafterprint, :onbeforeprint, :onbeforeunload, :onblur, :onerror, :onfocus, :onhashchange, :onload, :onmessage, :onoffline, :ononline, :onpopstate, :onpagehide, :onpageshow, :onredo, :onresize, :onstorage, :onundo, :onunload]))
  end
  class Body < HTMLElement
    attributes(:string => ([:text, :bg_color, :background, :link, :v_link, :a_link]))
  end
  class Heading < HTMLElement
    # do nothing
  end
  class Heading < HTMLElement
    attributes(:string => ([:align]))
  end
  class Paragraph < HTMLElement
    # do nothing
  end
  class Paragraph < HTMLElement
    attributes(:string => ([:align]))
  end
  class HR < HTMLElement
    # do nothing
  end
  class HR < HTMLElement
    attributes(:string => ([:align, :color, :size, :width]), :bool => ([:no_shade]))
  end
  class Pre < HTMLElement
    # do nothing
  end
  class Pre < HTMLElement
    attributes(:int => ([:width]))
  end
  class Quote < HTMLElement
    attributes(:string => ([:cite]))
  end
  class OList < HTMLElement
    attributes(:bool => ([:reversed]), :int => ([:start]))
  end
  class OList < HTMLElement
    attributes(:bool => ([:compact]), :string => ([:type]))
  end
  class UList < HTMLElement
    # do nothing
  end
  class UList < HTMLElement
    attributes(:bool => ([:compact]), :string => ([:type]))
  end
  class LI < HTMLElement
    attributes(:int => ([:value]))
  end
  class LI < HTMLElement
    attributes(:string => ([:type]))
  end
  class DList < HTMLElement
    # do nothing
  end
  class DList < HTMLElement
    attributes(:bool => ([:compact]))
  end
  class Div < HTMLElement
    # do nothing
  end
  class Div < HTMLElement
    attributes(:string => ([:align]))
  end
  class Anchor < HTMLElement
    attributes(:string => ([:href, :target, :ping, :rel, :media, :hreflang, :type, :text, :protocol, :host, :hostname, :port, :pathname, :search, :hash]), :token_list => ([:rel_list]))
  end
  class Anchor < HTMLElement
    attributes(:string => ([:coords, :charset, :name, :rev, :shape]))
  end
  class Time < HTMLElement
    attributes(:string => ([:date_time]), :bool => ([:pub_date]), :date => ([:value_as_date]))
  end
  class Span < HTMLElement
    # do nothing
  end
  class BR < HTMLElement
    # do nothing
  end
  class BR < HTMLElement
    attributes(:string => ([:clear]))
  end
  class Mod < HTMLElement
    attributes(:string => ([:cite, :date_time]))
  end
  class Image < HTMLElement
    attributes(:string => ([:alt, :src, :use_map]), :bool => ([:is_map, :complete]), :int => ([:width, :height, :natural_width, :natural_height]))
  end
  class Image < HTMLElement
    attributes(:string => ([:name, :align, :border, :long_desc]), :int => ([:hspace, :vspace]))
  end
  class IFrame < HTMLElement
    attributes(:string => ([:src, :srcdoc, :name, :width, :height, :content_window]), :token_list => ([:sandbox]), :bool => ([:seamless]), :document => ([:content_document]))
  end
  class IFrame < HTMLElement
    attributes(:string => ([:align, :frame_border, :long_desc, :margin_height, :margin_width, :scrolling]))
  end
  class Embed < HTMLElement
    attributes(:string => ([:src, :type, :width, :height]))
  end
  class Embed < HTMLElement
    attributes(:string => ([:align, :name]))
  end
  class Object < HTMLElement
    attributes(:string => ([:data, :type, :name, :use_map, :width, :height, :content_window, :validity, :validation_message]), :html_element => ([:form]), :document => ([:content_document]), :bool => ([:will_validate]))
  end
  class Object < HTMLElement
    attributes(:string => ([:align, :archive, :border, :code, :code_base, :code_type, :standby]), :bool => ([:declare]), :int => ([:hspace, :vspace]))
  end
  class Param < HTMLElement
    attributes(:string => ([:name, :value]))
  end
  class Param < HTMLElement
    attributes(:string => ([:type, :value_type]))
  end
  class Media < HTMLElement
    attributes(:string => ([:error, :src, :current_src, :preload, :buffered, :played, :seekable, :tracks]), :int => ([:network_state, :ready_state]), :bool => ([:seeking, :paused, :ended, :autoplay, :loop, :controls, :muted]), :float => ([:current_time, :start_time, :duration, :default_playback_rate, :playback_rate, :volume]))
  end
  class Video < Media
    attributes(:string => ([:width, :height, :poster]), :int => ([:video_width, :video_height]))
  end
  class Audio < Media
    # do nothing
  end
  class Source < HTMLElement
    attributes(:string => ([:src, :type, :media]))
  end
  class Track < HTMLElement
    attributes(:string => ([:kind, :label, :src, :srclang, :track]))
  end






  class Canvas < HTMLElement
    attributes(:int => ([:width, :height]))
  end






  class Map < HTMLElement
    attributes(:string => ([:name]), :html_collection => ([:areas, :images]))
  end
  class Area < HTMLElement
    attributes(:string => ([:alt, :coords, :shape, :href, :target, :ping, :rel, :media, :hreflang, :type, :protocol, :host, :hostname, :port, :pathname, :search, :hash]), :token_list => ([:rel_list]))
  end
  class Area < HTMLElement
    attributes(:bool => ([:no_href]))
  end
  class Table < HTMLElement
    attributes(:html_element => ([:caption, :t_head, :t_foot]), :html_collection => ([:t_bodies, :rows]), :string => ([:summary]))
  end
  class Table < HTMLElement
    attributes(:string => ([:align, :bg_color, :border, :cell_padding, :cell_spacing, :frame, :rules, :width]))
  end
  class TableCaption < HTMLElement
    # do nothing
  end
  class TableCaption < HTMLElement
    attributes(:string => ([:align]))
  end
  class TableCol < HTMLElement
    attributes(:int => ([:span]))
  end
  class TableCol < HTMLElement
    attributes(:string => ([:align, :ch, :ch_off, :v_align, :width]))
  end
  class TableSection < HTMLElement
    attributes(:html_collection => ([:rows]))
  end
  class TableSection < HTMLElement
    attributes(:string => ([:align, :ch, :ch_off, :v_align]))
  end
  class TableRow < HTMLElement
    attributes(:int => ([:row_index, :section_row_index]), :html_collection => ([:cells]))
  end
  class TableRow < HTMLElement
    attributes(:string => ([:align, :bg_color, :ch, :ch_off, :v_align]))
  end
  class TableCell < HTMLElement
    attributes(:int => ([:col_span, :row_span, :cell_index]), :token_list => ([:headers]))
  end
  class TableCell < HTMLElement
    attributes(:string => ([:abbr, :align, :axis, :bg_color, :ch, :ch_off, :height, :v_align, :width]), :bool => ([:no_wrap]))
  end
  class TableDataCell < TableCell
    # do nothing
  end
  class TableHeaderCell < TableCell
    attributes(:string => ([:scope]))
  end
  class Form < HTMLElement
    attributes(:string => ([:accept_charset, :action, :autocomplete, :enctype, :method, :name, :target]), :bool => ([:no_validate]), :html_collection => ([:elements]), :int => ([:length]))
  end
  class FieldSet < HTMLElement
    attributes(:bool => ([:disabled, :will_validate]), :html_element => ([:form]), :string => ([:name, :type, :validity, :validation_message]), :html_collection => ([:elements]))
  end
  class Legend < HTMLElement
    attributes(:html_element => ([:form]))
  end
  class Legend < HTMLElement
    attributes(:string => ([:align]))
  end
  class Label < HTMLElement
    attributes(:html_element => ([:form, :control]), :string => ([:html_for]))
  end
  class Input < HTMLElement
    attributes(:string => ([:accept, :alt, :autocomplete, :form_action, :form_enctype, :form_method, :form_target, :height, :max, :min, :name, :pattern, :placeholder, :src, :step, :type, :default_value, :value, :width, :validity, :validation_message]), :bool => ([:autofocus, :default_checked, :checked, :disabled, :form_no_validate, :indeterminate, :multiple, :read_only, :required, :will_validate]), :html_element => ([:form, :list, :selected_option]), :list => ([:files, :labels]), :int => ([:max_length, :size, :selection_start, :selection_end]), :date => ([:value_as_date]), :float => ([:value_as_number]))
  end
  class Input < HTMLElement
    attributes(:string => ([:align, :use_map]))
  end
  class Button < HTMLElement
    attributes(:bool => ([:autofocus, :disabled, :will_validate]), :html_element => ([:form]), :string => ([:form_action, :form_enctype, :form_method, :form_no_validate, :form_target, :name, :type, :value, :validity, :validation_message]), :list => ([:labels]))
  end
  class Select < HTMLElement
    attributes(:bool => ([:autofocus, :disabled, :multiple, :will_validate]), :html_element => ([:form]), :string => ([:name, :type, :value, :validity, :validation_message]), :int => ([:size, :length, :selected_index]), :html_collection => ([:options, :selected_options]), :list => ([:labels]))
  end
  class DataList < HTMLElement
    attributes(:html_collection => ([:options]))
  end
  class OptGroup < HTMLElement
    attributes(:bool => ([:disabled]), :string => ([:label]))
  end
  class Option < HTMLElement
    attributes(:bool => ([:disabled, :default_selected, :selected]), :html_element => ([:form]), :string => ([:label, :value, :text]), :int => ([:index]))
  end
  class TextArea < HTMLElement
    attributes(:bool => ([:autofocus, :disabled, :read_only, :required, :will_validate]), :int => ([:cols, :max_length, :rows, :text_length, :selection_start, :selection_end]), :html_element => ([:form]), :string => ([:name, :placeholder, :wrap, :type, :default_value, :value, :validity, :validation_message]), :list => ([:labels]))
  end
  class Keygen < HTMLElement
    attributes(:bool => ([:autofocus, :disabled, :will_validate]), :string => ([:challenge, :keytype, :name, :type, :validity, :validation_message]), :html_element => ([:form]), :list => ([:labels]))
  end
  class Output < HTMLElement
    attributes(:token_list => ([:html_for]), :html_element => ([:form]), :string => ([:name, :type, :default_value, :value, :validity, :validation_message]), :bool => ([:will_validate]), :list => ([:labels]))
  end
  class Progress < HTMLElement
    attributes(:float => ([:value, :max, :position]), :html_element => ([:form]), :list => ([:labels]))
  end
  class Meter < HTMLElement
    attributes(:float => ([:value, :min, :max, :low, :high, :optimum]), :html_element => ([:form]), :list => ([:labels]))
  end

  class Details < HTMLElement
    attributes(:bool => ([:open]))
  end
  class Command < HTMLElement
    attributes(:string => ([:type, :label, :icon, :radiogroup]), :bool => ([:disabled, :checked]))
  end
  class Menu < HTMLElement
    attributes(:string => ([:type, :label]))
  end
  class Menu < HTMLElement
    attributes(:bool => ([:compact]))
  end
  class Device < HTMLElement
    attributes(:string => ([:type, :data]))
  end




























  class Applet < HTMLElement
    attributes(:string => ([:align, :alt, :archive, :code, :code_base, :height, :name, :object, :width]), :int => ([:hspace, :vspace]))
  end
  class Marquee < HTMLElement
    attributes(:string => ([:behavior, :bg_color, :direction, :height, :true_speed, :width]), :int => ([:hspace, :loop, :scroll_amount, :scroll_delay, :vspace]), :function => ([:onbounce, :onfinish, :onstart]))
  end
  class FrameSet < HTMLElement
    attributes(:string => ([:cols, :rows]), :function => ([:onafterprint, :onbeforeprint, :onbeforeunload, :onblur, :onerror, :onfocus, :onhashchange, :onload, :onmessage, :onoffline, :ononline, :onpagehide, :onpageshow, :onpopstate, :onredo, :onresize, :onstorage, :onundo, :onunload]))
  end
  class Frame < HTMLElement
    attributes(:string => ([:frame_border, :long_desc, :margin_height, :margin_width, :name, :scrolling, :src]), :bool => ([:no_resize]), :document => ([:content_document]))
  end
  class BaseFont < HTMLElement
    attributes(:string => ([:color, :face]), :int => ([:size]))
  end
  class Directory < HTMLElement
    attributes(:bool => ([:compact]))
  end
  class Font < HTMLElement
    attributes(:string => ([:color, :face, :size]))
  end
  class AnchorCollection < ElementCollection
    def element_class; Anchor; end
  end

  class HTMLElementCollection < ElementCollection
    def element_class; HTMLElement; end
  end

  class AreaCollection < ElementCollection
    def element_class; Area; end
  end

  class AudioCollection < ElementCollection
    def element_class; Audio; end
  end

  class BaseCollection < ElementCollection
    def element_class; Base; end
  end

  class QuoteCollection < ElementCollection
    def element_class; Quote; end
  end

  class BodyCollection < ElementCollection
    def element_class; Body; end
  end

  class BRCollection < ElementCollection
    def element_class; BR; end
  end

  class ButtonCollection < ElementCollection
    def element_class; Button; end
  end

  class CanvasCollection < ElementCollection
    def element_class; Canvas; end
  end

  class TableCaptionCollection < ElementCollection
    def element_class; TableCaption; end
  end

  class TableColCollection < ElementCollection
    def element_class; TableCol; end
  end

  class CommandCollection < ElementCollection
    def element_class; Command; end
  end

  class DataListCollection < ElementCollection
    def element_class; DataList; end
  end

  class ModCollection < ElementCollection
    def element_class; Mod; end
  end

  class DetailsCollection < ElementCollection
    def element_class; Details; end
  end

  class DivCollection < ElementCollection
    def element_class; Div; end
  end

  class DListCollection < ElementCollection
    def element_class; DList; end
  end

  class EmbedCollection < ElementCollection
    def element_class; Embed; end
  end

  class FieldSetCollection < ElementCollection
    def element_class; FieldSet; end
  end

  class FormCollection < ElementCollection
    def element_class; Form; end
  end

  class HeadingCollection < ElementCollection
    def element_class; Heading; end
  end

  class HeadCollection < ElementCollection
    def element_class; Head; end
  end

  class HRCollection < ElementCollection
    def element_class; HR; end
  end

  class HtmlCollection < ElementCollection
    def element_class; Html; end
  end

  class IFrameCollection < ElementCollection
    def element_class; IFrame; end
  end

  class ImageCollection < ElementCollection
    def element_class; Image; end
  end

  class InputCollection < ElementCollection
    def element_class; Input; end
  end

  class KeygenCollection < ElementCollection
    def element_class; Keygen; end
  end

  class LabelCollection < ElementCollection
    def element_class; Label; end
  end

  class LegendCollection < ElementCollection
    def element_class; Legend; end
  end

  class LICollection < ElementCollection
    def element_class; LI; end
  end

  class MapCollection < ElementCollection
    def element_class; Map; end
  end

  class MenuCollection < ElementCollection
    def element_class; Menu; end
  end

  class MetaCollection < ElementCollection
    def element_class; Meta; end
  end

  class MeterCollection < ElementCollection
    def element_class; Meter; end
  end

  class ObjectCollection < ElementCollection
    def element_class; Object; end
  end

  class OListCollection < ElementCollection
    def element_class; OList; end
  end

  class OptGroupCollection < ElementCollection
    def element_class; OptGroup; end
  end

  class OptionCollection < ElementCollection
    def element_class; Option; end
  end

  class OutputCollection < ElementCollection
    def element_class; Output; end
  end

  class ParagraphCollection < ElementCollection
    def element_class; Paragraph; end
  end

  class ParamCollection < ElementCollection
    def element_class; Param; end
  end

  class PreCollection < ElementCollection
    def element_class; Pre; end
  end

  class ProgressCollection < ElementCollection
    def element_class; Progress; end
  end

  class ScriptCollection < ElementCollection
    def element_class; Script; end
  end

  class SelectCollection < ElementCollection
    def element_class; Select; end
  end

  class SourceCollection < ElementCollection
    def element_class; Source; end
  end

  class SpanCollection < ElementCollection
    def element_class; Span; end
  end

  class StyleCollection < ElementCollection
    def element_class; Style; end
  end

  class TableCollection < ElementCollection
    def element_class; Table; end
  end

  class TableSectionCollection < ElementCollection
    def element_class; TableSection; end
  end

  class TableDataCellCollection < ElementCollection
    def element_class; TableDataCell; end
  end

  class TextAreaCollection < ElementCollection
    def element_class; TextArea; end
  end

  class TableHeaderCellCollection < ElementCollection
    def element_class; TableHeaderCell; end
  end

  class TimeCollection < ElementCollection
    def element_class; Time; end
  end

  class TitleCollection < ElementCollection
    def element_class; Title; end
  end

  class TableRowCollection < ElementCollection
    def element_class; TableRow; end
  end

  class TrackCollection < ElementCollection
    def element_class; Track; end
  end

  class UListCollection < ElementCollection
    def element_class; UList; end
  end

  class VideoCollection < ElementCollection
    def element_class; Video; end
  end

  module Container
    Watir.tag_to_class[:a] = Anchor

    #
    # @return [Anchor]
    #

    def a(*selectors)
      Anchor.new(self, {:tag_name => "a"}, selectors)
    end

    #
    # @return [AnchorCollection]
    #

    def as(*selectors)
      AnchorCollection.new(self, {:tag_name => "a"}, selectors)
    end

    Watir.tag_to_class[:abbr] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def abbr(*selectors)
      HTMLElement.new(self, {:tag_name => "abbr"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def abbrs(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "abbr"}, selectors)
    end

    Watir.tag_to_class[:address] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def address(*selectors)
      HTMLElement.new(self, {:tag_name => "address"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def addresses(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "address"}, selectors)
    end

    Watir.tag_to_class[:area] = Area

    #
    # @return [Area]
    #

    def area(*selectors)
      Area.new(self, {:tag_name => "area"}, selectors)
    end

    #
    # @return [AreaCollection]
    #

    def areas(*selectors)
      AreaCollection.new(self, {:tag_name => "area"}, selectors)
    end

    Watir.tag_to_class[:article] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def article(*selectors)
      HTMLElement.new(self, {:tag_name => "article"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def articles(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "article"}, selectors)
    end

    Watir.tag_to_class[:aside] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def aside(*selectors)
      HTMLElement.new(self, {:tag_name => "aside"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def asides(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "aside"}, selectors)
    end

    Watir.tag_to_class[:audio] = Audio

    #
    # @return [Audio]
    #

    def audio(*selectors)
      Audio.new(self, {:tag_name => "audio"}, selectors)
    end

    #
    # @return [AudioCollection]
    #

    def audios(*selectors)
      AudioCollection.new(self, {:tag_name => "audio"}, selectors)
    end

    Watir.tag_to_class[:b] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def b(*selectors)
      HTMLElement.new(self, {:tag_name => "b"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def bs(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "b"}, selectors)
    end

    Watir.tag_to_class[:base] = Base

    #
    # @return [Base]
    #

    def base(*selectors)
      Base.new(self, {:tag_name => "base"}, selectors)
    end

    #
    # @return [BaseCollection]
    #

    def bases(*selectors)
      BaseCollection.new(self, {:tag_name => "base"}, selectors)
    end

    Watir.tag_to_class[:bdo] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def bdo(*selectors)
      HTMLElement.new(self, {:tag_name => "bdo"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def bdos(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "bdo"}, selectors)
    end

    Watir.tag_to_class[:blockquote] = Quote

    #
    # @return [Quote]
    #

    def blockquote(*selectors)
      Quote.new(self, {:tag_name => "blockquote"}, selectors)
    end

    #
    # @return [QuoteCollection]
    #

    def blockquotes(*selectors)
      QuoteCollection.new(self, {:tag_name => "blockquote"}, selectors)
    end

    Watir.tag_to_class[:body] = Body

    #
    # @return [Body]
    #

    def body(*selectors)
      Body.new(self, {:tag_name => "body"}, selectors)
    end

    #
    # @return [BodyCollection]
    #

    def bodys(*selectors)
      BodyCollection.new(self, {:tag_name => "body"}, selectors)
    end

    Watir.tag_to_class[:br] = BR

    #
    # @return [BR]
    #

    def br(*selectors)
      BR.new(self, {:tag_name => "br"}, selectors)
    end

    #
    # @return [BRCollection]
    #

    def brs(*selectors)
      BRCollection.new(self, {:tag_name => "br"}, selectors)
    end

    Watir.tag_to_class[:button] = Button

    #
    # @return [Button]
    #

    def button(*selectors)
      Button.new(self, {:tag_name => "button"}, selectors)
    end

    #
    # @return [ButtonCollection]
    #

    def buttons(*selectors)
      ButtonCollection.new(self, {:tag_name => "button"}, selectors)
    end

    Watir.tag_to_class[:canvas] = Canvas

    #
    # @return [Canvas]
    #

    def canvas(*selectors)
      Canvas.new(self, {:tag_name => "canvas"}, selectors)
    end

    #
    # @return [CanvasCollection]
    #

    def canvases(*selectors)
      CanvasCollection.new(self, {:tag_name => "canvas"}, selectors)
    end

    Watir.tag_to_class[:caption] = TableCaption

    #
    # @return [TableCaption]
    #

    def caption(*selectors)
      TableCaption.new(self, {:tag_name => "caption"}, selectors)
    end

    #
    # @return [TableCaptionCollection]
    #

    def captions(*selectors)
      TableCaptionCollection.new(self, {:tag_name => "caption"}, selectors)
    end

    Watir.tag_to_class[:cite] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def cite(*selectors)
      HTMLElement.new(self, {:tag_name => "cite"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def cites(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "cite"}, selectors)
    end

    Watir.tag_to_class[:code] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def code(*selectors)
      HTMLElement.new(self, {:tag_name => "code"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def codes(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "code"}, selectors)
    end

    Watir.tag_to_class[:col] = TableCol

    #
    # @return [TableCol]
    #

    def col(*selectors)
      TableCol.new(self, {:tag_name => "col"}, selectors)
    end

    #
    # @return [TableColCollection]
    #

    def cols(*selectors)
      TableColCollection.new(self, {:tag_name => "col"}, selectors)
    end

    Watir.tag_to_class[:colgroup] = TableCol

    #
    # @return [TableCol]
    #

    def colgroup(*selectors)
      TableCol.new(self, {:tag_name => "colgroup"}, selectors)
    end

    #
    # @return [TableColCollection]
    #

    def colgroups(*selectors)
      TableColCollection.new(self, {:tag_name => "colgroup"}, selectors)
    end

    Watir.tag_to_class[:command] = Command

    #
    # @return [Command]
    #

    def command(*selectors)
      Command.new(self, {:tag_name => "command"}, selectors)
    end

    #
    # @return [CommandCollection]
    #

    def commands(*selectors)
      CommandCollection.new(self, {:tag_name => "command"}, selectors)
    end

    Watir.tag_to_class[:datalist] = DataList

    #
    # @return [DataList]
    #

    def datalist(*selectors)
      DataList.new(self, {:tag_name => "datalist"}, selectors)
    end

    #
    # @return [DataListCollection]
    #

    def datalists(*selectors)
      DataListCollection.new(self, {:tag_name => "datalist"}, selectors)
    end

    Watir.tag_to_class[:dd] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def dd(*selectors)
      HTMLElement.new(self, {:tag_name => "dd"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def dds(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "dd"}, selectors)
    end

    Watir.tag_to_class[:del] = Mod

    #
    # @return [Mod]
    #

    def del(*selectors)
      Mod.new(self, {:tag_name => "del"}, selectors)
    end

    #
    # @return [ModCollection]
    #

    def dels(*selectors)
      ModCollection.new(self, {:tag_name => "del"}, selectors)
    end

    Watir.tag_to_class[:details] = Details

    #
    # @return [Details]
    #

    def details(*selectors)
      Details.new(self, {:tag_name => "details"}, selectors)
    end

    #
    # @return [DetailsCollection]
    #

    def details(*selectors)
      DetailsCollection.new(self, {:tag_name => "details"}, selectors)
    end

    Watir.tag_to_class[:dfn] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def dfn(*selectors)
      HTMLElement.new(self, {:tag_name => "dfn"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def dfns(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "dfn"}, selectors)
    end

    Watir.tag_to_class[:div] = Div

    #
    # @return [Div]
    #

    def div(*selectors)
      Div.new(self, {:tag_name => "div"}, selectors)
    end

    #
    # @return [DivCollection]
    #

    def divs(*selectors)
      DivCollection.new(self, {:tag_name => "div"}, selectors)
    end

    Watir.tag_to_class[:dl] = DList

    #
    # @return [DList]
    #

    def dl(*selectors)
      DList.new(self, {:tag_name => "dl"}, selectors)
    end

    #
    # @return [DListCollection]
    #

    def dls(*selectors)
      DListCollection.new(self, {:tag_name => "dl"}, selectors)
    end

    Watir.tag_to_class[:dt] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def dt(*selectors)
      HTMLElement.new(self, {:tag_name => "dt"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def dts(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "dt"}, selectors)
    end

    Watir.tag_to_class[:em] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def em(*selectors)
      HTMLElement.new(self, {:tag_name => "em"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def ems(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "em"}, selectors)
    end

    Watir.tag_to_class[:embed] = Embed

    #
    # @return [Embed]
    #

    def embed(*selectors)
      Embed.new(self, {:tag_name => "embed"}, selectors)
    end

    #
    # @return [EmbedCollection]
    #

    def embeds(*selectors)
      EmbedCollection.new(self, {:tag_name => "embed"}, selectors)
    end

    Watir.tag_to_class[:fieldset] = FieldSet

    #
    # @return [FieldSet]
    #

    def fieldset(*selectors)
      FieldSet.new(self, {:tag_name => "fieldset"}, selectors)
    end

    #
    # @return [FieldSetCollection]
    #

    def fieldsets(*selectors)
      FieldSetCollection.new(self, {:tag_name => "fieldset"}, selectors)
    end

    Watir.tag_to_class[:figcaption] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def figcaption(*selectors)
      HTMLElement.new(self, {:tag_name => "figcaption"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def figcaptions(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "figcaption"}, selectors)
    end

    Watir.tag_to_class[:figure] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def figure(*selectors)
      HTMLElement.new(self, {:tag_name => "figure"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def figures(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "figure"}, selectors)
    end

    Watir.tag_to_class[:footer] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def footer(*selectors)
      HTMLElement.new(self, {:tag_name => "footer"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def footers(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "footer"}, selectors)
    end

    Watir.tag_to_class[:form] = Form

    #
    # @return [Form]
    #

    def form(*selectors)
      Form.new(self, {:tag_name => "form"}, selectors)
    end

    #
    # @return [FormCollection]
    #

    def forms(*selectors)
      FormCollection.new(self, {:tag_name => "form"}, selectors)
    end

    Watir.tag_to_class[:h1] = Heading

    #
    # @return [Heading]
    #

    def h1(*selectors)
      Heading.new(self, {:tag_name => "h1"}, selectors)
    end

    #
    # @return [HeadingCollection]
    #

    def h1s(*selectors)
      HeadingCollection.new(self, {:tag_name => "h1"}, selectors)
    end

    Watir.tag_to_class[:h2] = Heading

    #
    # @return [Heading]
    #

    def h2(*selectors)
      Heading.new(self, {:tag_name => "h2"}, selectors)
    end

    #
    # @return [HeadingCollection]
    #

    def h2s(*selectors)
      HeadingCollection.new(self, {:tag_name => "h2"}, selectors)
    end

    Watir.tag_to_class[:h3] = Heading

    #
    # @return [Heading]
    #

    def h3(*selectors)
      Heading.new(self, {:tag_name => "h3"}, selectors)
    end

    #
    # @return [HeadingCollection]
    #

    def h3s(*selectors)
      HeadingCollection.new(self, {:tag_name => "h3"}, selectors)
    end

    Watir.tag_to_class[:h4] = Heading

    #
    # @return [Heading]
    #

    def h4(*selectors)
      Heading.new(self, {:tag_name => "h4"}, selectors)
    end

    #
    # @return [HeadingCollection]
    #

    def h4s(*selectors)
      HeadingCollection.new(self, {:tag_name => "h4"}, selectors)
    end

    Watir.tag_to_class[:h5] = Heading

    #
    # @return [Heading]
    #

    def h5(*selectors)
      Heading.new(self, {:tag_name => "h5"}, selectors)
    end

    #
    # @return [HeadingCollection]
    #

    def h5s(*selectors)
      HeadingCollection.new(self, {:tag_name => "h5"}, selectors)
    end

    Watir.tag_to_class[:h6] = Heading

    #
    # @return [Heading]
    #

    def h6(*selectors)
      Heading.new(self, {:tag_name => "h6"}, selectors)
    end

    #
    # @return [HeadingCollection]
    #

    def h6s(*selectors)
      HeadingCollection.new(self, {:tag_name => "h6"}, selectors)
    end

    Watir.tag_to_class[:head] = Head

    #
    # @return [Head]
    #

    def head(*selectors)
      Head.new(self, {:tag_name => "head"}, selectors)
    end

    #
    # @return [HeadCollection]
    #

    def heads(*selectors)
      HeadCollection.new(self, {:tag_name => "head"}, selectors)
    end

    Watir.tag_to_class[:header] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def header(*selectors)
      HTMLElement.new(self, {:tag_name => "header"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def headers(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "header"}, selectors)
    end

    Watir.tag_to_class[:hgroup] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def hgroup(*selectors)
      HTMLElement.new(self, {:tag_name => "hgroup"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def hgroups(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "hgroup"}, selectors)
    end

    Watir.tag_to_class[:hr] = HR

    #
    # @return [HR]
    #

    def hr(*selectors)
      HR.new(self, {:tag_name => "hr"}, selectors)
    end

    #
    # @return [HRCollection]
    #

    def hrs(*selectors)
      HRCollection.new(self, {:tag_name => "hr"}, selectors)
    end

    Watir.tag_to_class[:html] = Html

    #
    # @return [Html]
    #

    def html(*selectors)
      Html.new(self, {:tag_name => "html"}, selectors)
    end

    #
    # @return [HtmlCollection]
    #

    def htmls(*selectors)
      HtmlCollection.new(self, {:tag_name => "html"}, selectors)
    end

    Watir.tag_to_class[:i] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def i(*selectors)
      HTMLElement.new(self, {:tag_name => "i"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def is(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "i"}, selectors)
    end

    Watir.tag_to_class[:iframe] = IFrame

    #
    # @return [IFrame]
    #

    def iframe(*selectors)
      IFrame.new(self, {:tag_name => "iframe"}, selectors)
    end

    #
    # @return [IFrameCollection]
    #

    def iframes(*selectors)
      IFrameCollection.new(self, {:tag_name => "iframe"}, selectors)
    end

    Watir.tag_to_class[:img] = Image

    #
    # @return [Image]
    #

    def image(*selectors)
      Image.new(self, {:tag_name => "img"}, selectors)
    end

    #
    # @return [ImageCollection]
    #

    def images(*selectors)
      ImageCollection.new(self, {:tag_name => "img"}, selectors)
    end

    Watir.tag_to_class[:input] = Input

    #
    # @return [Input]
    #

    def input(*selectors)
      Input.new(self, {:tag_name => "input"}, selectors)
    end

    #
    # @return [InputCollection]
    #

    def inputs(*selectors)
      InputCollection.new(self, {:tag_name => "input"}, selectors)
    end

    Watir.tag_to_class[:ins] = Mod

    #
    # @return [Mod]
    #

    def ins(*selectors)
      Mod.new(self, {:tag_name => "ins"}, selectors)
    end

    #
    # @return [ModCollection]
    #

    def inses(*selectors)
      ModCollection.new(self, {:tag_name => "ins"}, selectors)
    end

    Watir.tag_to_class[:kbd] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def kbd(*selectors)
      HTMLElement.new(self, {:tag_name => "kbd"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def kbds(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "kbd"}, selectors)
    end

    Watir.tag_to_class[:keygen] = Keygen

    #
    # @return [Keygen]
    #

    def keygen(*selectors)
      Keygen.new(self, {:tag_name => "keygen"}, selectors)
    end

    #
    # @return [KeygenCollection]
    #

    def keygens(*selectors)
      KeygenCollection.new(self, {:tag_name => "keygen"}, selectors)
    end

    Watir.tag_to_class[:label] = Label

    #
    # @return [Label]
    #

    def label(*selectors)
      Label.new(self, {:tag_name => "label"}, selectors)
    end

    #
    # @return [LabelCollection]
    #

    def labels(*selectors)
      LabelCollection.new(self, {:tag_name => "label"}, selectors)
    end

    Watir.tag_to_class[:legend] = Legend

    #
    # @return [Legend]
    #

    def legend(*selectors)
      Legend.new(self, {:tag_name => "legend"}, selectors)
    end

    #
    # @return [LegendCollection]
    #

    def legends(*selectors)
      LegendCollection.new(self, {:tag_name => "legend"}, selectors)
    end

    Watir.tag_to_class[:li] = LI

    #
    # @return [LI]
    #

    def li(*selectors)
      LI.new(self, {:tag_name => "li"}, selectors)
    end

    #
    # @return [LICollection]
    #

    def lis(*selectors)
      LICollection.new(self, {:tag_name => "li"}, selectors)
    end

    Watir.tag_to_class[:map] = Map

    #
    # @return [Map]
    #

    def map(*selectors)
      Map.new(self, {:tag_name => "map"}, selectors)
    end

    #
    # @return [MapCollection]
    #

    def maps(*selectors)
      MapCollection.new(self, {:tag_name => "map"}, selectors)
    end

    Watir.tag_to_class[:mark] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def mark(*selectors)
      HTMLElement.new(self, {:tag_name => "mark"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def marks(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "mark"}, selectors)
    end

    Watir.tag_to_class[:menu] = Menu

    #
    # @return [Menu]
    #

    def menu(*selectors)
      Menu.new(self, {:tag_name => "menu"}, selectors)
    end

    #
    # @return [MenuCollection]
    #

    def menus(*selectors)
      MenuCollection.new(self, {:tag_name => "menu"}, selectors)
    end

    Watir.tag_to_class[:meta] = Meta

    #
    # @return [Meta]
    #

    def meta(*selectors)
      Meta.new(self, {:tag_name => "meta"}, selectors)
    end

    #
    # @return [MetaCollection]
    #

    def metas(*selectors)
      MetaCollection.new(self, {:tag_name => "meta"}, selectors)
    end

    Watir.tag_to_class[:meter] = Meter

    #
    # @return [Meter]
    #

    def meter(*selectors)
      Meter.new(self, {:tag_name => "meter"}, selectors)
    end

    #
    # @return [MeterCollection]
    #

    def meters(*selectors)
      MeterCollection.new(self, {:tag_name => "meter"}, selectors)
    end

    Watir.tag_to_class[:nav] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def nav(*selectors)
      HTMLElement.new(self, {:tag_name => "nav"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def navs(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "nav"}, selectors)
    end

    Watir.tag_to_class[:noscript] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def noscript(*selectors)
      HTMLElement.new(self, {:tag_name => "noscript"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def noscripts(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "noscript"}, selectors)
    end

    Watir.tag_to_class[:object] = Object

    #
    # @return [Object]
    #

    def object(*selectors)
      Object.new(self, {:tag_name => "object"}, selectors)
    end

    #
    # @return [ObjectCollection]
    #

    def objects(*selectors)
      ObjectCollection.new(self, {:tag_name => "object"}, selectors)
    end

    Watir.tag_to_class[:ol] = OList

    #
    # @return [OList]
    #

    def ol(*selectors)
      OList.new(self, {:tag_name => "ol"}, selectors)
    end

    #
    # @return [OListCollection]
    #

    def ols(*selectors)
      OListCollection.new(self, {:tag_name => "ol"}, selectors)
    end

    Watir.tag_to_class[:optgroup] = OptGroup

    #
    # @return [OptGroup]
    #

    def optgroup(*selectors)
      OptGroup.new(self, {:tag_name => "optgroup"}, selectors)
    end

    #
    # @return [OptGroupCollection]
    #

    def optgroups(*selectors)
      OptGroupCollection.new(self, {:tag_name => "optgroup"}, selectors)
    end

    Watir.tag_to_class[:option] = Option

    #
    # @return [Option]
    #

    def option(*selectors)
      Option.new(self, {:tag_name => "option"}, selectors)
    end

    #
    # @return [OptionCollection]
    #

    def options(*selectors)
      OptionCollection.new(self, {:tag_name => "option"}, selectors)
    end

    Watir.tag_to_class[:output] = Output

    #
    # @return [Output]
    #

    def output(*selectors)
      Output.new(self, {:tag_name => "output"}, selectors)
    end

    #
    # @return [OutputCollection]
    #

    def outputs(*selectors)
      OutputCollection.new(self, {:tag_name => "output"}, selectors)
    end

    Watir.tag_to_class[:p] = Paragraph

    #
    # @return [Paragraph]
    #

    def p(*selectors)
      Paragraph.new(self, {:tag_name => "p"}, selectors)
    end

    #
    # @return [ParagraphCollection]
    #

    def ps(*selectors)
      ParagraphCollection.new(self, {:tag_name => "p"}, selectors)
    end

    Watir.tag_to_class[:param] = Param

    #
    # @return [Param]
    #

    def param(*selectors)
      Param.new(self, {:tag_name => "param"}, selectors)
    end

    #
    # @return [ParamCollection]
    #

    def params(*selectors)
      ParamCollection.new(self, {:tag_name => "param"}, selectors)
    end

    Watir.tag_to_class[:pre] = Pre

    #
    # @return [Pre]
    #

    def pre(*selectors)
      Pre.new(self, {:tag_name => "pre"}, selectors)
    end

    #
    # @return [PreCollection]
    #

    def pres(*selectors)
      PreCollection.new(self, {:tag_name => "pre"}, selectors)
    end

    Watir.tag_to_class[:progress] = Progress

    #
    # @return [Progress]
    #

    def progress(*selectors)
      Progress.new(self, {:tag_name => "progress"}, selectors)
    end

    #
    # @return [ProgressCollection]
    #

    def progresses(*selectors)
      ProgressCollection.new(self, {:tag_name => "progress"}, selectors)
    end

    Watir.tag_to_class[:q] = Quote

    #
    # @return [Quote]
    #

    def q(*selectors)
      Quote.new(self, {:tag_name => "q"}, selectors)
    end

    #
    # @return [QuoteCollection]
    #

    def qs(*selectors)
      QuoteCollection.new(self, {:tag_name => "q"}, selectors)
    end

    Watir.tag_to_class[:rp] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def rp(*selectors)
      HTMLElement.new(self, {:tag_name => "rp"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def rps(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "rp"}, selectors)
    end

    Watir.tag_to_class[:rt] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def rt(*selectors)
      HTMLElement.new(self, {:tag_name => "rt"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def rts(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "rt"}, selectors)
    end

    Watir.tag_to_class[:ruby] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def ruby(*selectors)
      HTMLElement.new(self, {:tag_name => "ruby"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def rubies(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "ruby"}, selectors)
    end

    Watir.tag_to_class[:samp] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def samp(*selectors)
      HTMLElement.new(self, {:tag_name => "samp"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def samps(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "samp"}, selectors)
    end

    Watir.tag_to_class[:script] = Script

    #
    # @return [Script]
    #

    def script(*selectors)
      Script.new(self, {:tag_name => "script"}, selectors)
    end

    #
    # @return [ScriptCollection]
    #

    def scripts(*selectors)
      ScriptCollection.new(self, {:tag_name => "script"}, selectors)
    end

    Watir.tag_to_class[:section] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def section(*selectors)
      HTMLElement.new(self, {:tag_name => "section"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def sections(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "section"}, selectors)
    end

    Watir.tag_to_class[:select] = Select

    #
    # @return [Select]
    #

    def select(*selectors)
      Select.new(self, {:tag_name => "select"}, selectors)
    end

    #
    # @return [SelectCollection]
    #

    def selects(*selectors)
      SelectCollection.new(self, {:tag_name => "select"}, selectors)
    end

    Watir.tag_to_class[:small] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def small(*selectors)
      HTMLElement.new(self, {:tag_name => "small"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def smalls(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "small"}, selectors)
    end

    Watir.tag_to_class[:source] = Source

    #
    # @return [Source]
    #

    def source(*selectors)
      Source.new(self, {:tag_name => "source"}, selectors)
    end

    #
    # @return [SourceCollection]
    #

    def sources(*selectors)
      SourceCollection.new(self, {:tag_name => "source"}, selectors)
    end

    Watir.tag_to_class[:span] = Span

    #
    # @return [Span]
    #

    def span(*selectors)
      Span.new(self, {:tag_name => "span"}, selectors)
    end

    #
    # @return [SpanCollection]
    #

    def spans(*selectors)
      SpanCollection.new(self, {:tag_name => "span"}, selectors)
    end

    Watir.tag_to_class[:strong] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def strong(*selectors)
      HTMLElement.new(self, {:tag_name => "strong"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def strongs(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "strong"}, selectors)
    end

    Watir.tag_to_class[:style] = Style

    #
    # @return [Style]
    #

    def style(*selectors)
      Style.new(self, {:tag_name => "style"}, selectors)
    end

    #
    # @return [StyleCollection]
    #

    def styles(*selectors)
      StyleCollection.new(self, {:tag_name => "style"}, selectors)
    end

    Watir.tag_to_class[:sub] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def sub(*selectors)
      HTMLElement.new(self, {:tag_name => "sub"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def subs(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "sub"}, selectors)
    end

    Watir.tag_to_class[:summary] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def summary(*selectors)
      HTMLElement.new(self, {:tag_name => "summary"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def summaries(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "summary"}, selectors)
    end

    Watir.tag_to_class[:sup] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def sup(*selectors)
      HTMLElement.new(self, {:tag_name => "sup"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def sups(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "sup"}, selectors)
    end

    Watir.tag_to_class[:table] = Table

    #
    # @return [Table]
    #

    def table(*selectors)
      Table.new(self, {:tag_name => "table"}, selectors)
    end

    #
    # @return [TableCollection]
    #

    def tables(*selectors)
      TableCollection.new(self, {:tag_name => "table"}, selectors)
    end

    Watir.tag_to_class[:tbody] = TableSection

    #
    # @return [TableSection]
    #

    def tbody(*selectors)
      TableSection.new(self, {:tag_name => "tbody"}, selectors)
    end

    #
    # @return [TableSectionCollection]
    #

    def tbodys(*selectors)
      TableSectionCollection.new(self, {:tag_name => "tbody"}, selectors)
    end

    Watir.tag_to_class[:td] = TableDataCell

    #
    # @return [TableDataCell]
    #

    def td(*selectors)
      TableDataCell.new(self, {:tag_name => "td"}, selectors)
    end

    #
    # @return [TableDataCellCollection]
    #

    def tds(*selectors)
      TableDataCellCollection.new(self, {:tag_name => "td"}, selectors)
    end

    Watir.tag_to_class[:textarea] = TextArea

    #
    # @return [TextArea]
    #

    def textarea(*selectors)
      TextArea.new(self, {:tag_name => "textarea"}, selectors)
    end

    #
    # @return [TextAreaCollection]
    #

    def textareas(*selectors)
      TextAreaCollection.new(self, {:tag_name => "textarea"}, selectors)
    end

    Watir.tag_to_class[:tfoot] = TableSection

    #
    # @return [TableSection]
    #

    def tfoot(*selectors)
      TableSection.new(self, {:tag_name => "tfoot"}, selectors)
    end

    #
    # @return [TableSectionCollection]
    #

    def tfoots(*selectors)
      TableSectionCollection.new(self, {:tag_name => "tfoot"}, selectors)
    end

    Watir.tag_to_class[:th] = TableHeaderCell

    #
    # @return [TableHeaderCell]
    #

    def th(*selectors)
      TableHeaderCell.new(self, {:tag_name => "th"}, selectors)
    end

    #
    # @return [TableHeaderCellCollection]
    #

    def ths(*selectors)
      TableHeaderCellCollection.new(self, {:tag_name => "th"}, selectors)
    end

    Watir.tag_to_class[:thead] = TableSection

    #
    # @return [TableSection]
    #

    def thead(*selectors)
      TableSection.new(self, {:tag_name => "thead"}, selectors)
    end

    #
    # @return [TableSectionCollection]
    #

    def theads(*selectors)
      TableSectionCollection.new(self, {:tag_name => "thead"}, selectors)
    end

    Watir.tag_to_class[:time] = Time

    #
    # @return [Time]
    #

    def time(*selectors)
      Time.new(self, {:tag_name => "time"}, selectors)
    end

    #
    # @return [TimeCollection]
    #

    def times(*selectors)
      TimeCollection.new(self, {:tag_name => "time"}, selectors)
    end

    Watir.tag_to_class[:title] = Title

    #
    # @return [Title]
    #

    def title(*selectors)
      Title.new(self, {:tag_name => "title"}, selectors)
    end

    #
    # @return [TitleCollection]
    #

    def titles(*selectors)
      TitleCollection.new(self, {:tag_name => "title"}, selectors)
    end

    Watir.tag_to_class[:tr] = TableRow

    #
    # @return [TableRow]
    #

    def tr(*selectors)
      TableRow.new(self, {:tag_name => "tr"}, selectors)
    end

    #
    # @return [TableRowCollection]
    #

    def trs(*selectors)
      TableRowCollection.new(self, {:tag_name => "tr"}, selectors)
    end

    Watir.tag_to_class[:track] = Track

    #
    # @return [Track]
    #

    def track(*selectors)
      Track.new(self, {:tag_name => "track"}, selectors)
    end

    #
    # @return [TrackCollection]
    #

    def tracks(*selectors)
      TrackCollection.new(self, {:tag_name => "track"}, selectors)
    end

    Watir.tag_to_class[:ul] = UList

    #
    # @return [UList]
    #

    def ul(*selectors)
      UList.new(self, {:tag_name => "ul"}, selectors)
    end

    #
    # @return [UListCollection]
    #

    def uls(*selectors)
      UListCollection.new(self, {:tag_name => "ul"}, selectors)
    end

    Watir.tag_to_class[:var] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def var(*selectors)
      HTMLElement.new(self, {:tag_name => "var"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def vars(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "var"}, selectors)
    end

    Watir.tag_to_class[:video] = Video

    #
    # @return [Video]
    #

    def video(*selectors)
      Video.new(self, {:tag_name => "video"}, selectors)
    end

    #
    # @return [VideoCollection]
    #

    def videos(*selectors)
      VideoCollection.new(self, {:tag_name => "video"}, selectors)
    end

    Watir.tag_to_class[:wbr] = HTMLElement

    #
    # @return [HTMLElement]
    #

    def wbr(*selectors)
      HTMLElement.new(self, {:tag_name => "wbr"}, selectors)
    end

    #
    # @return [HTMLElementCollection]
    #

    def wbrs(*selectors)
      HTMLElementCollection.new(self, {:tag_name => "wbr"}, selectors)
    end

  end # Container
end # Watir